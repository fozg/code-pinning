[{"D:\\Code\\code-pinning\\src\\index.js":"1","D:\\Code\\code-pinning\\src\\App.js":"2","D:\\Code\\code-pinning\\src\\src\\services\\OP.js":"3","D:\\Code\\code-pinning\\src\\hooks\\useClickOutside.js":"4"},{"size":2950,"mtime":1612257104128,"results":"5","hashOfConfig":"6"},{"size":5145,"mtime":1612255226555,"results":"7","hashOfConfig":"6"},{"size":152,"mtime":1612204882384,"results":"8","hashOfConfig":"6"},{"size":1076,"mtime":1612255176738,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"pv1jvw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\Code\\code-pinning\\src\\index.js",[],["20","21"],"D:\\Code\\code-pinning\\src\\App.js",[],"D:\\Code\\code-pinning\\src\\src\\services\\OP.js",[],"D:\\Code\\code-pinning\\src\\hooks\\useClickOutside.js",["22","23"],"import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default function useOnClickOutside(ref, handler) {\r\n  useEffect(\r\n    () => {\r\n      const listener = (event) => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n\r\n        handler(event);\r\n      };\r\n\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n}\r\n",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":10,"nodeType":"30","messageId":"31","endLine":1,"endColumn":18},{"ruleId":"28","severity":1,"message":"32","line":1,"column":31,"nodeType":"30","messageId":"31","endLine":1,"endColumn":37},"no-native-reassign",["33"],"no-negated-in-lhs",["34"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]